generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

////////////////
// Part Model //
////////////////
type FullName {
  name String
  tag  String?
}

enum PartCategory {
  cpu
  mainboard
  memory
  graphics
  ssd
  hdd
  power
  case
  cooler
}

// @issue: loosely typed (prisma doesn't support typed Json)
// details: Record<string, Details>
type Details {
  value String
  type  String
}

type Vendors {
  openMarket VendorsList[]
  mall       VendorsList[]
  credit     VendorsList[]
  cash       VendorsList[]
}

type VendorsList {
  vendorName   String
  vendorCode   String
  vendorUrl    String
  shippingCost Int
  prices       Int
}

type Prices {
  timestamp DateTime
  prices    Int
}

/////////////////
// Build Model //
/////////////////
type Parts {
  cpu       Build_PartObject
  mainboard Build_PartObject
  memory    Build_PartObject
  graphics  Build_PartObject
  ssd       Build_PartObject
  hdd       Build_PartObject
  power     Build_PartObject
  case      Build_PartObject
  cooler    Build_PartObject[]
  reserved  Build_PartObject
}

type Build_PartObject {
  partId  String         @db.ObjectId
  name    String
  count   Int
  price   Int
  filters VendorFilter[]
}

type VendorFilter {
  marketType MarketType
  vendorUrl  String
  status     VendorFilterStatus
}

enum VendorFilterStatus {
  included
  excluded
  selected
}

type Optimization {
  hash         String
  lowestPrice  OptimizedBuild
  leastPackage OptimizedBuild
}

type OptimizedBuild {
  cpu       OptimizedBuild_PartObject
  mainboard OptimizedBuild_PartObject
  memory    OptimizedBuild_PartObject
  graphics  OptimizedBuild_PartObject
  ssd       OptimizedBuild_PartObject
  hdd       OptimizedBuild_PartObject
  power     OptimizedBuild_PartObject
  case      OptimizedBuild_PartObject
  cooler    OptimizedBuild_PartObject[]
}

type OptimizedBuild_PartObject {
  marketType MarketType
  vendorUrl  String
}

enum MarketType {
  openMarket
  mall
  credit
  cash
}

////////////////
// User Model //
////////////////
enum Role {
  admin
  manager
  user
}

enum Status {
  activated
  blocked
  deleted
  unverified
}

type UserBuild {
  cpu       String   @db.ObjectId
  mainboard String   @db.ObjectId
  memory    String   @db.ObjectId
  graphics  String   @db.ObjectId
  ssd       String   @db.ObjectId
  hdd       String   @db.ObjectId
  power     String   @db.ObjectId
  case      String   @db.ObjectId
  cooler    String[] @db.ObjectId
}

type Notification {
  isChecked Boolean
  title     String
  content   String
}

type Warning {
  title   String
  content String
}

type LoggedInHistory {
  timestamp DateTime @default(now())
  ip        String
}

////////////////
// Post Model //
////////////////
type Vote {
  voter  String     @db.ObjectId
  action VoteAction
}

type PostBuild {
  cpu       Post_BuildPartObject
  mainboard Post_BuildPartObject
  memory    Post_BuildPartObject
  graphics  Post_BuildPartObject
  ssd       Post_BuildPartObject
  hdd       Post_BuildPartObject
  power     Post_BuildPartObject
  case      Post_BuildPartObject
  cooler    Post_BuildPartObject[]
}

type Post_BuildPartObject {
  partId String @db.ObjectId
  count  Int
}

enum DocumentStatus {
  published
  blocked
  deleted
}

enum VoteAction {
  like
  dislike
}

enum Tag {
  published
  blocked
  deleted
}

//////////////////////
//// Comment Model ///
//////////////////////
type CommentChildren {
  count Int
  list  String[] @db.ObjectId
}

enum DocumentType {
  post
  review
}

//////////////////////////////////////////////////////
//////////////////////////////////////////////////////
////////////////////// Models ////////////////////////
//////////////////////////////////////////////////////
//////////////////////////////////////////////////////
model Part {
  id                 String       @id @default(auto()) @map("_id") @db.ObjectId
  pcode              String
  name               FullName
  category           PartCategory
  variants           String[]     @db.ObjectId
  sortOrder          Int
  stock              Boolean
  isVariant          Boolean
  // @issue: loosely typed (prisma doesn't support typed Json)
  // details: Record<string, Details> <-- go to Details type
  details            Json
  vendors            Vendors
  prices             Prices[]
  isUpdating         Boolean
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @default(now())
  // relations
  Reivew             Reivew[]
  variantsPointingTo Part[]       @relation("Variants", fields: [variants], references: [id])
  variantsPointedBy  Part[]       @relation("Variants", fields: [variants], references: [id])

  @@map("parts")
}

model Build {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  owner         String       @db.ObjectId
  ownerRelation User         @relation(fields: [owner], references: [id])
  name          String
  isSelected    Boolean      @default(false)
  parts         Parts
  optimization  Optimization
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now())

  @@map("builds")
}

model User {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  email           String
  nickname        String
  password        String
  role            Role
  status          Status
  bookmarks       String[]          @db.ObjectId
  build           UserBuild
  avatar          Bytes
  notifications   Notification[]
  warnings        Warning[]
  loggedInHistory LoggedInHistory[]
  lastLoggedInAt  DateTime          @default(now())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now())
  // 1-n relations
  Build           Build[]
  Post            Post[]            @relation("Owner")
  Reivew          Reivew[]
  Links           Links[]
  Comment         Comment[]

  @@map("users")
}

model Post {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  owner          String         @db.ObjectId
  ownerRelation  User           @relation("Owner", fields: [owner], references: [id])
  category       PartCategory
  nickname       String
  tag            Tag
  title          String
  content        String
  builds         PostBuild[]
  status         DocumentStatus
  votes          Vote[]
  comments       String[]       @db.ObjectId
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now())
  lastAccessedAt DateTime       @default(now())

  comment Comment[]

  @@map("posts")
}

model Reivew {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  partId         String         @db.ObjectId
  partIdRelation Part           @relation(fields: [partId], references: [id])
  owner          String         @db.ObjectId
  ownerRelation  User           @relation(fields: [owner], references: [id])
  status         DocumentStatus
  content        String
  votes          Vote[]
  comments       String[]       @db.ObjectId
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now())

  comment Comment[]

  @@map("reviews")
}

model Comment {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  documentType  DocumentType
  postId        String?         @db.ObjectId
  post          Post?           @relation(fields: [postId], references: [id])
  reviewId      String?         @db.ObjectId
  review        Reivew?         @relation(fields: [reviewId], references: [id])
  owner         String          @db.ObjectId
  ownerRelation User            @relation(fields: [owner], references: [id])
  children      CommentChildren
  indentation   Int
  content       String
  votes         Vote[]
  status        DocumentStatus
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
}

model Links {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  owner         String   @db.ObjectId
  ownerRelation User     @relation(fields: [owner], references: [id])
  token         String
  createdAt     DateTime @default(now())

  @@map("links")
}
