openapi: 3.0.3
info:
  title: Electrokerot Website API 0.2
  description: 컴퓨터부품 (parts) / 견적서 (builds)
  contact:
    email: swimmingpolar@gmail.com
  version: 0.0.2
servers:
  - url: http://localhost:5611/v1
tags:
  - name: parts
    description: Computer components
  - name: builds
    description: Computer builds
  - name: posts
  - name: reviews
  - name: user
  - name: auth
paths:
  /parts/{ids}:
    get:
      tags:
        - parts
      summary: Get parts' information of the given ids
      operationId: getPartsByPartIds
      parameters:
        - name: ids
          in: path
          required: true
          schema:
            type: array
            items:
              type: string
              example: ObjectId
            minItems: 1
            maxItems: 10
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Part'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /parts/searchQueries:
    get:
      tags:
        - parts
      summary: Get a list of autocompleted queries
      operationId: getPartNamesByQuery
      parameters:
        - name: category
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Categories'
        - name: query
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          $ref: '#/components/responses/BadRequest'
  /parts/search:
    get:
      tags:
        - parts
      summary: Get search results
      operationId: getPartsByFilters
      parameters:
        - name: category
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Categories'
        - name: page
          in: query
          required: true
          schema:
            type: integer
            default: 1
            minimum: 1
            multipleOf: 1
        - name: query
          in: query
          schema:
            type: string
        - name: filters
          in: query
          content:
            application/json:
              schema:
                type: object
                description: 제조사, 용량, 색상, ...
                additionalProperties:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Part'
        '400':
          $ref: '#/components/responses/BadRequest'
  /parts:
    post:
      tags:
        - parts
      summary: Insert a part
      operationId: insertPartByUrl
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  format: uri
              required:
                - url
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Part'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /builds:
    get:
      tags:
        - builds
      summary: Get a list of an user's builds
      operationId: getBuildsByUserId
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Build'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - bearerAuth: []
    post:
      tags:
        - builds
      summary: Create a new build
      operationId: createBuildByUserId
      requestBody:
        $ref: '#/components/requestBodies/BuildCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Build'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - bearerAuth: []
  /builds/{id}/clone:
    post:
      tags:
        - builds
      summary: Clone the given build
      operationId: cloneBuildByBuildId
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: ObjectId
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Build'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /builds/{id}:
    patch:
      tags:
        - builds
      summary: Update a build
      operationId: updateBuildByBuildId
      requestBody:
        $ref: '#/components/requestBodies/BuildCreate'
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
            example: ObjectId
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
    delete:
      tags:
        - builds
      summary: Delete a build
      operationId: deleteBuildByBuildId
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: ObjectId
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /user:
    get:
      tags:
        - user
      summary: Get the information of an user
      operationId: getUserByUserId
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    format: email
                  nickname:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - bearerAuth: []
    post:
      tags:
        - user
      summary: Create an user
      operationId: createUser
      requestBody:
        $ref: '#/components/requestBodies/UserSignup'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
    patch:
      tags:
        - user
      summary: Update an user's profile
      operationId: updateUserProfileByUserId
      requestBody:
        $ref: '#/components/requestBodies/UserUpdateProfile'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'
      security:
        - bearerAuth: []
    delete:
      tags:
        - user
      summary: Delete user
      operationId: deleteUserByUserId
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
        - bearerAuth: []
  /user/posts:
    get:
      tags:
        - user
      summary: Get a list of all the posts an user has written
      operationId: getAllPostsByUserId
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
            minimum: 1
            multipleOf: 1
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
        - bearerAuth: []
  /user/reviews:
    get:
      tags:
        - user
      summary: Get a list of all the reviews an user has written
      operationId: getAllReviewsByUserId
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
            minimum: 1
            multipleOf: 1
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
        - bearerAuth: []
  /user/comments:
    get:
      tags:
        - user
      summary: Get a list of all the comments an user has written
      operationId: getAllCommentsByUserId
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
            minimum: 1
            multipleOf: 1
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
        - bearerAuth: []
  /login:
    post:
      tags:
        - auth
      summary: Login
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Ok
          headers:
            Authorization:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: ObjectId
                  nickname:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /logout:
    get:
      tags:
        - auth
      summary: Logout
      operationId: logout
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
        - bearerAuth: []
  /posts:
    get:
      tags:
        - posts
      summary: Get a list of posts
      operationId: getPostsByFilter
      parameters:
        - name: category
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/PostCategory'
        - name: page
          in: query
          required: true
          schema:
            type: integer
            default: 1
            minimum: 1
            multipleOf: 1
        - name: title
          description: option#1 (only take single option)
          in: query
          schema:
            type: string
        - name: nickname
          description: option#2 (only take single option)
          in: query
          schema:
            type: string
        - name: build
          description: option#3 (only take single option)
          in: query
          explode: false
          schema:
            type: array
            items:
              type: string
              example: ObjectId
        - name: userId
          in: query
          description: option#4 (only take single option)
          schema:
            type: string
            example: ObjectId
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '400':
          $ref: '#/components/responses/BadRequest'
    post:
      tags:
        - posts
      summary: Create a post
      operationId: createPost
      requestBody:
        $ref: '#/components/requestBodies/PostCreate'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - bearerAuth: []
  /posts/{id}:
    get:
      tags:
        - posts
      summary: Get a post
      operationId: getPostByPostId
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: ObjectId
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      tags:
        - posts
      summary: Update a post
      operationId: updatePostByPostId
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: ObjectId
      requestBody:
        $ref: '#/components/requestBodies/PostCreate'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
    delete:
      tags:
        - posts
      summary: Delete a post
      operationId: deletePostByPostId
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: ObjectId
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /posts/{id}/vote:
    post:
      tags:
        - posts
      summary: vote like/dislike on a post
      operationId: votePost
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: ObjectId
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - action
              properties:
                action:
                  type: string
                  enum:
                    - like
                    - dislike
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /posts/{id}/bookmark:
    post:
      tags:
        - posts
      summary: bookmark a post
      operationId: bookmark
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: ObjectId
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - action
              properties:
                action:
                  type: string
                  enum:
                    - bookmark
                    - unmark
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /posts/{id}/comments:
    get:
      tags:
        - posts
      summary: Get a list of comments of the given post
      operationId: getCommentsByPostId
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: ObjectId
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      tags:
        - posts
      summary: Create a comment on the given post
      operationId: createCommentByPostId
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: ObjectId
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                parent:
                  description: specify parent to create comment on comment
                  type: string
                  example: ObjectId
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /posts/{postId}/comments/{commentId}:
    patch:
      tags:
        - posts
      summary: Update a comment of the given post
      operationId: updateCommentByPostId
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
            example: ObjectId
        - name: commentId
          in: path
          required: true
          schema:
            type: string
            example: ObjectId
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
    delete:
      tags:
        - posts
      summary: Delete a comment of the given post
      operationId: deleteCommentByPostId
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
            example: ObjectId
        - name: commentId
          in: path
          required: true
          schema:
            type: string
            example: ObjectId
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /posts/{postId}/comments/{commentId}/vote:
    post:
      tags:
        - posts
      summary: vote like/dislike on the given comment
      operationId: voteComment[post]
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
            example: ObjectId
        - name: commentId
          in: path
          required: true
          schema:
            type: string
            example: ObjectId
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - action
              properties:
                action:
                  type: string
                  enum:
                    - like
                    - dislike
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /reviews/{partId}:
    get:
      tags:
        - reviews
      summary: Get a list of reviews on the given part
      operationId: getReviewsByCursor
      parameters:
        - name: partId
          in: path
          required: true
          schema:
            type: string
            example: ObjectId
        - name: cursor
          in: query
          required: true
          schema:
            type: string
            example: ObjectId
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      tags:
        - reviews
      summary: Create a review on the given part
      operationId: createReviewByPartId
      parameters:
        - name: partId
          in: path
          required: true
          schema:
            type: string
            example: ObjectId
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /reviews/{id}/:
    patch:
      tags:
        - reviews
      summary: Update a review
      operationId: updateReviewByReviewId
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: ObjectId
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
    delete:
      tags:
        - reviews
      summary: Delete a review
      operationId: deleteReviewByReviewId
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: ObjectId
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /reviews/{id}/vote:
    post:
      tags:
        - reviews
      summary: vote like/dislike on a review
      operationId: voteReview
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: ObjectId
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - action
              properties:
                action:
                  type: string
                  enum:
                    - like
                    - dislike
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /reviews/{id}/comments:
    get:
      tags:
        - reviews
      summary: Get a list of comments of the given review
      operationId: getCommentsByReviewId
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: ObjectId
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      tags:
        - reviews
      summary: Create a comment on the given review
      operationId: createCommentByReviewId
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: ObjectId
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /reviews/{reviewId}/comments/{commentId}:
    patch:
      tags:
        - reviews
      summary: Update a comment on the given review
      operationId: updateCommentByReviewIdAndCommentId
      parameters:
        - name: reviewId
          in: path
          required: true
          schema:
            type: string
            example: ObjectId
        - name: commentId
          in: path
          required: true
          schema:
            type: string
            example: ObjectId
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
    delete:
      tags:
        - reviews
      summary: Delete a comment of the given review
      operationId: deleteCommentByReviewIdAndCommentId
      parameters:
        - name: reviewId
          in: path
          required: true
          schema:
            type: string
            example: ObjectId
        - name: commentId
          in: path
          required: true
          schema:
            type: string
            example: ObjectId
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /reviews/{reviewId}/comments/{commentId}/vote:
    post:
      tags:
        - reviews
      summary: vote like/dislike on the given comment
      operationId: voteComment[review]
      parameters:
        - name: reviewId
          in: path
          required: true
          schema:
            type: string
            example: ObjectId
        - name: commentId
          in: path
          required: true
          schema:
            type: string
            example: ObjectId
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - action
              properties:
                action:
                  type: string
                  enum:
                    - like
                    - dislike
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /verify/{token}:
    get:
      tags:
        - auth
      summary: Verify an user
      operationId: verifyUserByToken
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /reset/{token}:
    post:
      tags:
        - auth
      summary: Reset an user's password
      operationId: resetPasswordByToken
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - password
                - passwordConfirm
              properties:
                password:
                  type: string
                  format: password
                passwordConfirm:
                  type: string
                  format: password
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
components:
  schemas:
    Part:
      type: object
      properties:
        _id:
          type: string
          example: ObjectId
        name:
          type: string
        category:
          type: string
        variants:
          type: array
          items:
            # $ref: '#/components/schemas/Part'
            # self-referencing (open api cannot render self referneces)
            # list of variants [Part, Part, ...]
            type: string
            example: SelfReferencingPartObjects
        details:
          type: object
          description: 제조사, 용량, 색상, ...
          additionalProperties:
            properties:
              type:
                type: string
              value:
                type: string
        vendors:
          type: array
          items:
            type: object
            properties:
              marketType:
                $ref: '#/components/schemas/MarketType'
              vendorsList:
                type: array
                items:
                  type: object
                  properties:
                    vendorName:
                      type: string
                    vendorCode:
                      type: string
                    url:
                      type: string
                      format: uri
        prices:
          type: array
          items:
            type: object
            properties:
              timestamp:
                type: string
                format: date-time
              value:
                type: string
        updatedAt:
          type: string
          format: date-time
    Build:
      type: object
      properties:
        _id:
          type: string
          example: ObjectId
        name:
          type: string
        isSelected:
          type: boolean
          default: false
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        parts:
          type: object
          description: cpu, motherboard, ...
          additionalProperties:
            properties:
              name:
                type: string
              count:
                type: integer
                default: 1
              price:
                type: string
              partId:
                type: string
                example: ObjectId
              filters:
                type: array
                items:
                  type: object
                  properties:
                    marketType:
                      type: string
                      enum:
                        - openMarket
                        - mall
                        - credit
                        - cash
                    vendorUrl:
                      type: string
                      format: uri
                    status:
                      type: string
                      enum:
                        - included
                        - selected
                        - excluded
        optimization:
          type: object
          properties:
            hash:
              type: string
              example: sha1 hash
            lowestPrice:
              type: object
              description: cpu, motherboard, ...
              additionalProperties:
                properties:
                  marketType:
                    $ref: '#/components/schemas/MarketType'
                  vendorUrl:
                    type: string
                    format: uri
            leastPackage:
              type: object
              description: cpu, motherboard, ...
              additionalProperties:
                properties:
                  marketType:
                    $ref: '#/components/schemas/MarketType'
                  vendorUrl:
                    type: string
                    format: uri
    Categories:
      type: string
      enum:
        - cpu
        - motherboard
        - memory
        - graphics
        - ssd
        - hdd
        - power
        - case
        - cooler
    MarketType:
      type: string
      enum:
        - openMarket
        - mall
        - credit
        - cash
    Post:
      type: object
      properties:
        _id:
          type: string
          example: ObjectId
        category:
          type: string
        owner:
          type: string
          example: ObjectId
        nickname:
          type: string
        title:
          type: string
        tag:
          type: string
        content:
          type: string
        builds:
          type: array
          items:
            type: object
            description: cpu, motherboard, ...
            additionalProperties:
              type: object
              properties:
                partId:
                  type: string
                  example: ObjectId
                count:
                  type: number
          example: builds[0], builds[1], ...
        likes:
          type: number
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        createdAt:
          type: string
          format: date-time
    PostCategory:
      type: string
      default: free
      enum:
        - free
    PostTag:
      type: string
      default: general
      enum:
        - general
        - question
        - build
    Comment:
      type: object
      properties:
        _id:
          type: string
          example: ObjectId
        documentType:
          type: string
        document:
          type: string
          example: ObjectId
        owner:
          type: string
          example: ObjectId
        parent:
          type: string
          example: ObjectId
        nickname:
          type: string
        content:
          type: string
        likes:
          type: number
        indentation:
          type: number
        createdAt:
          type: string
          format: date-time
    Review:
      type: object
      properties:
        _id:
          type: string
          example: ObjectId
        partId:
          type: string
          example: ObjectId
        owner:
          type: string
          example: ObjectId
        content:
          type: string
        likes:
          type: integer
          default: 0
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        createdAt:
          type: string
          format: date-time
  requestBodies:
    BuildCreate:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
              isSelected:
                type: boolean
                default: false
              parts:
                type: object
                description: cpu, motherboard, ...
                additionalProperties:
                  properties:
                    name:
                      type: string
                    count:
                      type: integer
                      default: 1
                      minimum: 1
                      multipleOf: 1
                    price:
                      type: string
                    partId:
                      type: string
                      example: ObjectId
                    filters:
                      type: array
                      items:
                        type: object
                        properties:
                          marketType:
                            type: string
                            enum:
                              - openMarket
                              - mall
                              - credit
                              - cash
                          vendorUrl:
                            type: string
                            format: uri
                          status:
                            type: string
                            enum:
                              - included
                              - selected
                              - excluded
              optimization:
                type: object
                properties:
                  hash:
                    type: string
                    example: sha1 hash
                  lowestPrice:
                    type: object
                    description: cpu, motherboard, ...
                    additionalProperties:
                      properties:
                        marketType:
                          $ref: '#/components/schemas/MarketType'
                        vendorUrl:
                          type: string
                          format: uri
                  leastPackage:
                    type: object
                    description: cpu, motherboard, ...
                    additionalProperties:
                      properties:
                        marketType:
                          $ref: '#/components/schemas/MarketType'
                        vendorUrl:
                          type: string
                          format: uri
    UserSignup:
      content:
        application/json:
          schema:
            type: object
            required:
              - email
              - password
              - passwordConfirm
              - nickname
            properties:
              email:
                type: string
                format: email
              password:
                type: string
                format: password
              passwordConfirm:
                type: string
                format: password
              nickname:
                type: string
    UserUpdateProfile:
      content:
        application/json:
          schema:
            type: object
            required:
              - password
              - passwordConfirm
            properties:
              password:
                type: string
                format: password
              passwordConfirm:
                type: string
                format: password
              nickname:
                type: string
    PostCreate:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              category:
                $ref: '#/components/schemas/PostCategory'
              tag:
                $ref: '#/components/schemas/PostTag'
              title:
                type: string
              content:
                type: string
              builds:
                type: array
                items:
                  type: object
                  description: cpu, motherboard, ...
                  additionalProperties:
                    type: object
                    properties:
                      partId:
                        type: string
                        example: ObjectId
                      count:
                        type: integer
                        default: 1
                        minimum: 1
                        multipleOf: 1
            required:
              - category
              - tag
              - title
              - content
  responses:
    Created:
      description: Created
    NoContent:
      description: No content
    BadRequest:
      description: Bad request (resource validation failure)
    Unauthorized:
      description: Unauthorized access
    Forbidden:
      description: Request forbidden (access to unreachable resource, hit resource limitation)
    NotFound:
      description: Resource not found
    Conflict:
      description: Resource conflicts
    ServerError:
      description: Internal server error
    ServerBusy:
      description: Server is busy
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
