openapi: 3.0.3
info:
  title: Electrokerot Website API
  description:
    컴퓨터부품 (parts) / 견적서 (builds)
  contact:
    email: swimmingpolar@gmail.com
  version: 1.0.0
servers:
  - url: http://localhost:5611/v1
tags:
  - name: parts
    description: Computer component parts
  - name: builds
    description: User created computer build
  - name: posts
  - name: comments
  - name: user
  - name: auth
paths:
  /parts/{ids}:
    get:
      tags:
        - parts
      summary: Get parts information of given ids
      operationId: getPartsByIds
      parameters:
        - name: ids
          in: path
          required: true
          schema:
            type: array
            items:
              type: string
              example: ObjectId
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Part'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /parts/searchQueries:
    get:
      tags:
        - parts
      summary: Get list of autocompleted queries
      operationId: getPartNamesByQuery
      parameters:
        - name: query
          in: query
          style: form
          explode: true
          required: true
          schema:
            type: object
            properties:
              query:
                type: string
              category:
                $ref: '#/components/schemas/Categories'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          $ref: '#/components/responses/BadRequest'
  /parts/search:
    post:
      tags:
        - parts
      summary: Get search results
      operationId: getPartsByFilters
      requestBody:
        $ref: '#/components/requestBodies/PartSearch'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Part'
        '400':
          $ref: '#/components/responses/BadRequest'
  /parts:
    post:
      tags:
        - parts
      summary: Insert part
      operationId: Insert part by url
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  format: uri
              required:
               - url
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Part'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /builds:
    get:
      tags:
        - builds
      summary: Get user's list of builds
      operationId: getBuildById
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Build'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - bearerAuth: []
    post:
      tags:
        - builds
      summary: Create new build
      operationId: createBuild
      requestBody:
        $ref: '#/components/requestBodies/BuildPost'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Build'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - bearerAuth: []
  /builds/{id}/clone:
    post:
      tags:
        - builds
      summary: Clone build
      operationId: cloneBuildById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: ObjectId
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Build'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /builds/{id}:
    patch:
      tags:
        - builds
      summary: Update build
      operationId: updateBuild
      requestBody:
        $ref: '#/components/requestBodies/BuildUpdate'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: ObjectId
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
    delete:
      tags:
        - builds
      summary: Delete build
      operationId: deleteBuild
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: ObjectId
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /user:
    get:
      tags:
        - user
      summary: Get user information
      operationId: getUserById
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    format: email
                  nickname:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
        - bearerAuth: []
    post:
      tags:
        - user
      summary: Create user
      operationId: registerUser
      requestBody:
        $ref: '#/components/requestBodies/Signup'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
    patch:
      tags:
        - user
      summary: Update user profile
      operationId: updateUserProfile
      requestBody:
        $ref: '#/components/requestBodies/UpdateUserProfile'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'
      security:
        - bearerAuth: []
    delete:
      tags:
        - user
      summary: Delete user
      operationId: deleteUser
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
        - bearerAuth: []
  /login:
    post:
      tags:
        - auth
      summary: Login
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '204':
          description: No content
          headers:
            Authorization:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /logout:
    get:
      tags:
        - auth
      summary: Logout
      operationId: logout
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
        - bearerAuth: []
components:
  schemas:
    Part:
      type: object
      properties:
        _id:
          type: string
          example: ObjectId
        name:
          type: string
        category:
          type: string
        variants:
          type: array
          items:
            # $ref: '#/components/schemas/Part'
            # self-referencing (open api cannot render self referneces)
            # list of variants [Part, Part, ...]
            type: string
            example:
              SelfReferencingPartObjects
        details:
          type: object
          additionalProperties:
            properties:
              type:
                type: string
              value:
                type: string
        vendors:
          type: array
          items:
            type: object
            properties:
              marketType:
                type: string
              vendorsList:
                type: array
                items:
                  type: object
                  properties:
                    vendorName:
                      type: string
                    vendorCode:
                      type: string
                    url:
                      type: string
                      format: uri
        prices:
          type: array
          items:
            type: object
            properties:
              timestamp:
                type: string
                format: date-time
              value:
                type: string
    Build:
      type: object
      properties:
        _id:
          type: string
          example: ObjectId
        name:
          type: string
        isSelected:
          type: boolean
          default: false
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        parts:
          type: object
          additionalProperties:
            properties:
              name:
                type: string
              count:
                type: integer
                minimum: 1
              price:
                type: string
              partId:
                type: string
                example: ObjectId
              filters:
                type: array
                items:
                  type: object
                  properties:
                    marketType:
                      type: string
                      enum:
                        - openMarket
                        - mall
                        - credit
                        - cash
                    vendorUrl:
                      type: string
                      format: uri
                    status:
                      type: string
                      enum:
                        - included
                        - selected
                        - excluded
        optimization:
          type: object
          properties:
            hash:
              type: string
              example: sha1 hash
            lowestPrice:
              type: object
              additionalProperties:
                properties:
                  marketType:
                    $ref: '#/components/schemas/MarketType'
                  vendorUrl:
                    type: string
                    format: uri
            leastPackage:
              type: object
              additionalProperties:
                properties:
                  marketType:
                    $ref: '#/components/schemas/MarketType'
                  vendorUrl:
                    type: string
                    format: uri
    Categories:
      type: string
      enum:
        - cpu
        - mainboard
        - memory
        - graphics
        - ssd
        - hdd
        - power
        - case
        - cooler
    MarketType:
      type: string
      enum:
        - openMarket
        - mall
        - credit
        - cash
  requestBodies:
    PartSearch:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              category:
                $ref: '#/components/schemas/Categories'
              page:
                type: integer
                minimum: 1
              filters:
                type: object
                properties:
                  searchQuery:
                    type: string
                additionalProperties:
                  type: array
                  items:
                    type: string
            required:
              - category
              - page
    BuildPost:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
              parts:
                type: object
                additionalProperties:
                  properties:
                    name:
                      type: string
                    count:
                      type: integer
                      minimum: 1
                    price:
                      type: string
                    partId:
                      type: string
                      example: ObjectId
                    filters:
                      type: array
                      items:
                        type: object
                        properties:
                          marketType:
                            type: string
                            enum:
                              - openMarket
                              - mall
                              - credit
                              - cash
                          vendorUrl:
                            type: string
                            format: uri
                          status:
                            type: string
                            enum:
                              - included
                              - selected
                              - excluded
              optimization:
                type: object
                properties:
                  hash:
                    type: string
                    example: sha1 hash
                  lowestPrice:
                    type: object
                    additionalProperties:
                      properties:
                        marketType:
                          $ref: '#/components/schemas/MarketType'
                        vendorUrl:
                          type: string
                          format: uri
                  leastPackage:
                    type: object
                    additionalProperties:
                      properties:
                        marketType:
                          $ref: '#/components/schemas/MarketType'
                        vendorUrl:
                          type: string
                          format: uri
    BuildUpdate:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
              isSelected:
                type: boolean
                default: true
              parts:
                type: object
                additionalProperties:
                  properties:
                    name:
                      type: string
                    count:
                      type: integer
                      minimum: 1
                    price:
                      type: string
                    partId:
                      type: string
                      example: ObjectId
                    filters:
                      type: array
                      items:
                        type: object
                        properties:
                          marketType:
                            type: string
                            enum:
                              - openMarket
                              - mall
                              - credit
                              - cash
                          vendorUrl:
                            type: string
                            format: uri
                          status:
                            type: string
                            enum:
                              - included
                              - selected
                              - excluded
              optimization:
                type: object
                properties:
                  hash:
                    type: string
                    example: sha1 hash
                  lowestPrice:
                    type: object
                    additionalProperties:
                      properties:
                        marketType:
                          $ref: '#/components/schemas/MarketType'
                        vendorUrl:
                          type: string
                          format: uri
                  leastPackage:
                    type: object
                    additionalProperties:
                      properties:
                        marketType:
                          $ref: '#/components/schemas/MarketType'
                        vendorUrl:
                          type: string
                          format: uri
    Signup:
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
              password:
                type: string
                format: password
              passwordConfirm:
                type: string
                format: password
              nickname:
                type: string
    UpdateUserProfile:
      content:
        application/json:
          schema:
            type: object
            properties:
              password:
                type: string
                format: password
              passwordConfirm:
                type: string
                format: password
              nickname:
                type: string
  responses:
    Created:
      description: Created
    NoContent:
      description: No content
    BadRequest:
      description: Bad request (resource validation failure)
    Unauthorized:
      description: Unauthorized access
    Forbidden:
      description: Request forbidden (access to unreachable resource, hit resource limitation)
    NotFound:
      description: Resource not found
    Conflict:
      description: Resource conflicts
    ServerError:
      description: Internal server error
    ServerBusy:
      description: Server is busy
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT